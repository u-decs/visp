{
  "ManualFuncs": {
    "VpImgproc": {
      "reconstruct": {
        "j_code": [
          "\n//",
          "// manual port",
          "// C++: static void reconstruct(vpImage_char marker, vpImage_char mask, vpImage_char I, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "//",
          "//javadoc: visp::reconstruct(marker, mask, I)\n",
          "public static void reconstruct(org.visp.core.VpImageUChar marker, org.visp.core.VpImageUChar mask, org.visp.core.VpImageUChar I)",
          "{",
          "   reconstruct(marker.nativeObj, mask.nativeObj, I.nativeObj);",
          "}"
        ],
        "jn_code": [
          "\n// C++: static void reconstruct(vpImage_char marker, vpImage_char mask, vpImage_char I, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "private static native void reconstruct(long marker_nativeObj, long mask_nativeObj, long I_nativeObj);"
        ],
        "cpp_code": [
          "\n//",
          "// manual port",
          "// static void reconstruct(vpImage_char marker, vpImage_char mask, vpImage_char I, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "//\n",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_reconstruct (JNIEnv*, jclass, jlong, jlong, jlong);\n",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_reconstruct",
          "  (JNIEnv* env, jclass , jlong marker_nativeObj, jlong mask_nativeObj, jlong I_nativeObj)",
          "{",
          "  static const char method_name[] = \"imgproc::reconstruct()\";",
          "  try {",
          "   LOGD(\"%s\", method_name);",
          "   vpImage<unsigned char>& marker = *((vpImage<unsigned char>*)marker_nativeObj);",
          "   vpImage<unsigned char>& mask = *((vpImage<unsigned char>*)mask_nativeObj);",
          "   vpImage<unsigned char>& I = *((vpImage<unsigned char>*)I_nativeObj);",
          "   visp::reconstruct( marker, mask, I, vpImageMorphology::CONNEXITY_4 );",
          "   return;",
          "  } catch(const std::exception &e) {",
          "   throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "   throwJavaException(env, 0, method_name);",
          "  }",
          "  return;",
          "}"
        ]
      },
      "floodFill": {
        "j_code": [
          "\n//",
          "// manual port",
          "// C++: static void floodFill(vpImage_char I, vpImagePoint seedPoint, char oldValue, char newValue, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)\n",
          "//javadoc: visp::floodFill(I, seedPoint, oldValue, newValue)\n",
          "public static void floodFill(org.visp.core.VpImageUChar I, org.visp.core.VpImagePoint seedPoint, char oldValue, char newValue)",
          "{",
          "    floodFill(I.nativeObj, seedPoint.get_i(), seedPoint.get_j(), oldValue, newValue);",
          "}"
        ],
        "jn_code": [
          "\n// C++: static void floodFill(vpImage_char I, vpImagePoint seedPoint, char oldValue, char newValue, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "private static native void floodFill(long I_nativeObj, double seedPoint_i, double seedPoint_j, char oldValue, char newValue);\n"
        ],
        "cpp_code": [
          "\n//",
          "// static void floodFill(vpImage_char I, vpImagePoint seedPoint, char oldValue, char newValue, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "//\n",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_floodFill (JNIEnv*, jclass, jlong, jdouble, jdouble, jchar, jchar);",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_floodFill",
          "  (JNIEnv* env, jclass , jlong I_nativeObj, jdouble seedPoint_i, jdouble seedPoint_j, jchar oldValue, jchar newValue)",
          "{",
          "  static const char method_name[] = \"imgproc::floodFill()\";",
          "  try {",
          "   LOGD(\"%s\", method_name);",
          "   vpImage<unsigned char>& I = *((vpImage<unsigned char>*)I_nativeObj);",
          "   vpImagePoint seedPoint((int)seedPoint_i, (int)seedPoint_j);",
          "   visp::floodFill( I, seedPoint, (char)oldValue, (char)newValue, vpImageMorphology::CONNEXITY_4 );",
          "   return;",
          "  } catch(const std::exception &e) {",
          "   throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "   throwJavaException(env, 0, method_name);",
          "  }",
          "  return;",
          "}"
        ]
      },
      "fillHoles": {
        "j_code": [
          "//",
          "// C++: static void fillHoles(vpImage_char I, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "//",
          "\n",
          "//javadoc: visp::fillHoles(I)",
          "\n",
          "public static void fillHoles(org.visp.core.VpImageUChar I)",
          "{",
          "       fillHoles(I.nativeObj);",
          "       return;",
          "}",
          "\n"
        ],
        "jn_code": [
          "// C++: static void fillHoles(vpImage_char I, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "private static native void fillHoles(long I_nativeObj);\n"
        ],
        "cpp_code": [
          "\n\n//",
          "// manual port",
          "// static void fillHoles(vpImage_char I, vpImageMorphology_vpConnexityType connexity = vpImageMorphology::CONNEXITY_4)",
          "//",
          "\n",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_fillHoles (JNIEnv*, jclass, jlong);\n",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_fillHoles",
          "  (JNIEnv* env, jclass , jlong I_nativeObj)",
          "{",
          "  try {",
          "   LOGD(\"imgproc::fillHoles()\");",
          "   vpImage<unsigned char>& I = *((vpImage<unsigned char>*)I_nativeObj);",
          "   visp::fillHoles(I);",
          "   return;",
          "  } catch(const std::exception &e) {",
          "   throwJavaException(env, &e, \"imgproc::fillHoles()\");",
          "  } catch (...) {",
          "   throwJavaException(env, 0, \"imgproc::fillHoles()\");",
          "  }",
          "  return;",
          "}\n"
        ]
      },
      "gammaCorrection": {
        "j_code": [
          "//",
          "// C++: static void fillHoles(vpImage_char I1, vpImage_char I2, float gamma vp_vpGammaMethod method = visp::GAMMA_MANUAL, vpImage_bool * I_mask = 0)",
          "//",
          "\n",
          "//javadoc: visp::gammaCorrection(I1, I2, gamma)",
          "\n",
          "public static void gammaCorrection(org.visp.core.VpImageUChar I1, org.visp.core.VpImageUChar I2, float gamma)",
          "{",
          "       gammaCorrection(I1.nativeObj, I2.nativeObj, gamma);",
          "       return;",
          "}\n",
          "//",
          "// C++: static void fillHoles(vpImage_char I, float gamma vp_vpGammaMethod method = visp::GAMMA_MANUAL, vpImage_bool * I_mask = 0)",
          "//",
          "\n",
          "//javadoc: visp::gammaCorrection(I1, gamma)",
          "\n",
          "public static void gammaCorrection(org.visp.core.VpImageUChar I, float gamma)",
          "{",
          "       gammaCorrection(I.nativeObj, gamma);",
          "       return;",
          "}",
          "\n"
        ],
        "jn_code": [
          "// C++: static void gammaCorrection(vpImage_char I1, vpImage_char I2, float gamma, vpGammaMethod method = visp::GAMMA_MANUAL, vpImage_bool* p_mask = 0)",
          "private static native void gammaCorrection(long I1_nativeobj, long I2_nativeobj, float gamma);\n",
          "// C++: static void gammaCorrection(vpImage_char I, float gamma, vpGammaMethod method = visp::GAMMA_MANUAL, vpImage_bool* p_mask = 0)",
          "private static native void gammaCorrection(long I_nativeobj, float gamma);\n"
        ],
        "cpp_code": [
          "//",
          "// manual port",
          "// C++: static void gammaCorrection(vpImage_char I1, vpImage_char I2, float gamma, vpGammaMethod method = visp::GAMMA_MANUAL, vpImage_bool* p_mask = 0)",
          "//",
          "//javadoc: visp::gammaCorrection(I1, I2, gamma)",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_gammaCorrection_10 (JNIEnv*, jclass, jlong, jlong, jfloat);",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_gammaCorrection_10 (JNIEnv* env, jclass , jlong I1_nativeObj, jlong I2_nativeObj, jfloat gamma)",
          "{",
          "  static const char method_name[] = \"imgproc::gammaCorrection_10()\";",
          "  try {",
          "    LOGD(\"%s\", method_name);",
          "    vpImage<unsigned char>& I1 = *((vpImage<unsigned char>*)I1_nativeObj);",
          "        vpImage<unsigned char>& I2 = *((vpImage<unsigned char>*)I2_nativeObj);",
          "    visp::gammaCorrection( I1, I2, (float)gamma, visp::GAMMA_MANUAL, 0 );",
          "    return;",
          "  } catch(const std::exception &e) {",
          "    throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "    throwJavaException(env, 0, method_name);",
          "  }",
          "  return;",
          "}\n",
          "//",
          "// manual port",
          "// C++: static void gammaCorrection(vpImage_char I, float gamma, vpGammaMethod method = visp::GAMMA_MANUAL, vpImage_bool* p_mask = 0)",
          "//",
          "//javadoc: visp::gammaCorrection(I, gamma)\n",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_gammaCorrection_13 (JNIEnv*, jclass, jlong, jfloat);\n",
          "JNIEXPORT void JNICALL Java_org_visp_imgproc_VpImgproc_gammaCorrection_13 (JNIEnv* env, jclass , jlong I_nativeObj, jfloat gamma)",
          "{",
          "  static const char method_name[] = \"imgproc::gammaCorrection_13()\";",
          "  try {",
          "    LOGD(\"%s\", method_name);",
          "    vpImage<unsigned char>& I = *((vpImage<unsigned char>*)I_nativeObj);",
          "    visp::gammaCorrection( I, (float)gamma, visp::GAMMA_MANUAL, 0 );",
          "    return;",
          "  } catch(const std::exception &e) {",
          "    throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "    throwJavaException(env, 0, method_name);",
          "  }",
          "  return;",
          "}\n\n"
        ]
      },
      "vpGammaColorHandlingList": {
        "j_code": [
          "\n//",
          "// manual port",
          "// C++: std::string vpGammaColorHandlingList(const std::string &pref = \"<\", const std::string &sep = \" , \", const std::string &suf = \">\")\n",
          "//javadoc: visp::vpGammaColorHandlingList(pref, sep, suf)\n",
          "public static String vpGammaColorHandlingList(String pref, String sep, String suf)",
          "{",
          "    return vpGammaColorHandlingList(pref, sep, suf);",
          "}"
        ],
        "jn_code": [
          "\n// C++: std::string vpGammaColorHandlingList(const std::string &pref = \"<\", const std::string &sep = \" , \", const std::string &suf = \">\")\n"
        ],
        "cpp_code": [
          "//",
          "// manual port",
          "// C++: std::string vpGammaColorHandlingList(const std::string &pref = \"<\", const std::string &sep = \" , \", const std::string &suf = \">\")\n",
          "//",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaColorHandlingList_10 (JNIEnv*, jclass, jstring);",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaColorHandlingList_10 (JNIEnv* env, jclass , jstring pref)",
          "{",
          "  static const char method_name[] = \"imgproc::vpGammaColorHandlingList_10()\";",
          "  try {",
          "    LOGD(\"%s\", method_name);",
          "    const char* utf_pref = env->GetStringUTFChars(pref, 0); string n_pref( utf_pref ? utf_pref : \"\" ); env->ReleaseStringUTFChars(pref, utf_pref);",
          "    string _retval_ = visp::vpGammaColorHandlingList( n_pref );",
          "    return env->NewStringUTF(_retval_.c_str());",
          "  } catch(const std::exception &e) {",
          "    throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "    throwJavaException(env, 0, method_name);",
          "  }",
          "  return 0;",
          "}\n",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaColorHandlingList_11 (JNIEnv*, jclass);",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaColorHandlingList_11 (JNIEnv* env, jclass )",
          "{",
          "  static const char method_name[] = \"imgproc::vpGammaColorHandlingList_11()\";",
          "  try {",
          "    LOGD(\"%s\", method_name);",
          "    string _retval_ = visp::vpGammaColorHandlingList(  );",
          "    return env->NewStringUTF(_retval_.c_str());",
          "  } catch(const std::exception &e) {",
          "    throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "    throwJavaException(env, 0, method_name);",
          "  }",
          "  return 0;",
          "}\n"
        ]
      },
      "vpGammaMethodList": {
        "j_code": [
          "\n//",
          "// manual port",
          "// C++: std::string vpGammaMethodList(const std::string &pref = \"<\", const std::string &sep = \" , \", const std::string &suf = \">\")\n",
          "//javadoc: visp::vpGammaMethodList(pref, sep, suf)\n",
          "public static String vpGammaMethodList(String pref, String sep, String suf)",
          "{",
          "    return vpGammaMethodList(pref, sep, suf);",
          "}"
        ],
        "jn_code": [
          "\n// C++: std::string vpGammaMethodList(const std::string &pref = \"<\", const std::string &sep = \" , \", const std::string &suf = \">\")\n"
        ],
        "cpp_code": [
          "//",
          "// manual port",
          "// C++: std::string vpGammaMethodList(const std::string &pref = \"<\", const std::string &sep = \" , \", const std::string &suf = \">\")\n",
          "//",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaMethodList_10 (JNIEnv*, jclass, jstring);",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaMethodList_10 (JNIEnv* env, jclass , jstring pref)",
          "{",
          "  static const char method_name[] = \"imgproc::vpGammaMethodList_10()\";",
          "  try {",
          "    LOGD(\"%s\", method_name);",
          "    const char* utf_pref = env->GetStringUTFChars(pref, 0); string n_pref( utf_pref ? utf_pref : \"\" ); env->ReleaseStringUTFChars(pref, utf_pref);",
          "    string _retval_ = visp::vpGammaMethodList( n_pref );",
          "    return env->NewStringUTF(_retval_.c_str());",
          "  } catch(const std::exception &e) {",
          "    throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "    throwJavaException(env, 0, method_name);",
          "  }",
          "  return 0;",
          "}\n",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaMethodList_11 (JNIEnv*, jclass);",
          "JNIEXPORT jstring JNICALL Java_org_visp_imgproc_VpImgproc_vpGammaMethodList_11 (JNIEnv* env, jclass )",
          "{",
          "  static const char method_name[] = \"imgproc::vpGammaMethodList_11()\";",
          "  try {",
          "    LOGD(\"%s\", method_name);",
          "    string _retval_ = visp::vpGammaMethodList(  );",
          "    return env->NewStringUTF(_retval_.c_str());",
          "  } catch(const std::exception &e) {",
          "    throwJavaException(env, &e, method_name);",
          "  } catch (...) {",
          "    throwJavaException(env, 0, method_name);",
          "  }",
          "  return 0;",
          "}\n"
        ]
      }
    }
  },
  "type_dict": {
    "vpContour": {
      "j_type": "VpContour",
      "jn_args": [
        [
          "__int64",
          ".nativeObj"
        ]
      ],
      "jn_type": "long",
      "jni_type": "jlong",
      "jni_var": "vpContour& %(n)s = *((vpContour*)%(n)s_nativeObj)",
      "suffix": "J",
      "j_import": "org.visp.core.VpContour"
    }
  }
}
